doctype html
head
  meta(charset='utf-8')
  meta(http-equiv='X-UA-Compatible' content='IE=edge')
  meta(name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no')
  meta(name='description' content='')
  meta(name='author' content='')
  title Dashboard - SB Admin
  link(href='https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css' rel='stylesheet')
  link(rel='stylesheet' href='https://unpkg.com/leaflet@1.7.1/dist/leaflet.css' integrity='sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==' crossorigin='')
  script(src='https://unpkg.com/leaflet@1.7.1/dist/leaflet.js' integrity='sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==' crossorigin='')
  script(src='https://code.jquery.com/jquery-3.6.0.min.js' integrity='sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=' crossorigin='anonymous')
  link(href='css/styles.css' rel='stylesheet')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js' crossorigin='anonymous')
nav.sb-topnav.navbar.navbar-expand.navbar-dark.bg-dark
  // Sidebar Toggle
  button#sidebarToggle.btn.btn-link.btn-sm.order-1.order-lg-0.me-4.me-lg-0(href='#!')
    i.fas.fa-bars
  // Navbar Brand
  a.navbar-brand.ps-3(href='dashboard.html') Electri: Automated Data Sourcing for AMBER Alert Reponse
  // Navbar Search
  form.d-none.d-md-inline-block.form-inline.ms-auto.me-0.me-md-3.my-2.my-md-0
    .input-group
      //
        <input class="form-control" type="text" placeholder="Search for..." aria-label="Search for..." aria-describedby="btnNavbarSearch" />
        <button class="btn btn-primary" id="btnNavbarSearch" type="button"><i class="fas fa-search"></i></button>
  // Navbar
  ul.navbar-nav.ms-auto.ms-md-0.me-3.me-lg-4
    li.nav-item.dropdown
      a#navbarDropdown.nav-link.dropdown-toggle(href='#' role='button' data-bs-toggle='dropdown' aria-expanded='false')
        i.fas.fa-user.fa-fw
      ul.dropdown-menu.dropdown-menu-end(aria-labelledby='navbarDropdown')
        //
          <li><a class="dropdown-item" href="#!">Settings</a></li>
          <li><a class="dropdown-item" href="#!">Activity Log</a></li>
          <li><hr class="dropdown-divider" /></li>
        li
          a.dropdown-item(href='index.html') Logout
#layoutSidenav
  #layoutSidenav_nav
    nav#sidenavAccordion.sb-sidenav.accordion.sb-sidenav-dark
      .sb-sidenav-menu
        .nav
          a.nav-link(href='dashboard.html')
            .sb-nav-link-icon
              i.fas.fa-tachometer-alt
            |                                 Dashboard
          a.nav-link(href='archives.html')
            .sb-nav-link-icon
              i.fas.fa-table
            |                                 Archives
          a.nav-link(href='map.html')
            .sb-nav-link-icon
              i.fas.fa-map
            |                                 Map View
          a.nav-link(href='index.html')
            .sb-nav-link-icon
              i.fas.fa-home
            |                                 Logout
      .sb-sidenav-footer
        .small Logged in as:
        |                         Start Bootstrap
  #layoutSidenav_content
    main
      // button(id="new") Add new point
      #map(style='height: 1000px')
      script.
        var mymap = L.map('map').setView([38.8898, -77.044], 14);
        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'mapbox/streets-v11',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1IjoibmJ1cnkiLCJhIjoiY2t2cmk5cWZvNGdveDJ0bnU4N2k2eHl4NSJ9.nfPDUZJDa1wPD2v5LhF8qg',
        }).addTo(mymap);
        var matches = [];
        function getData() {
        fetch('test.json')
        .then((response) => response.text())
        .then((data) => {
        d = JSON.parse(data);
        m = d.matches;
        for (var i = 0; i < m.length; i++) {
        console.log(m[i]);
        if (!matches.includes(m[i].id)) {
        var marker = L.marker(L.latLng(parseFloat(m[i].x_coord), parseFloat(m[i].y_coord))).addTo(mymap);
        matches.push(m[i].id);
        }
        }
        });
        }
        getData();
        setInterval(getData, 1000);
script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js' crossorigin='anonymous')
script(src='js/scripts.js')
